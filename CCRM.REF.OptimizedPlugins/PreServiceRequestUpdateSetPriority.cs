// --------------------------------------------------------------------------------------------------------------------
// <copyright file="PreServiceRequestUpdateSetPriority.cs" company="Microsoft">
//   Copyright (C) Microsoft.  All rights reserved.
//   THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
//   KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
//   IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
//   PARTICULAR PURPOSE.
// </copyright>
//
// <summary>
//  PostServiceRequestUpdateSetPriority Plugin
// </summary>
// --------------------------------------------------------------------------------------------------------------------
namespace CCRM.REF.OptimizedPlugins
{
    using CCRM.REF.OptimizedPlugins.Helpers;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System;
    using System.Globalization;

    /// <summary>
    /// PostServiceRequestUpdate_UpdateUserTimeZones Plugin.
    /// Fires when the following attributes are updated:
    /// All Attributes
    /// </summary>    
    public class PreServiceRequestUpdateSetPriority : Plugin
    {
        /// <summary>
        /// Alias of the image registered for the snapshot of the 
        /// primary entity's attributes before the core platform operation executes.
        /// The image contains the following attributes:
        /// No Attributes
        /// </summary>
        private readonly string preImageAlias = "PreImage";

        /// <summary>
        /// Initializes a new instance of the <see cref="PostServiceRequestUpdateSetPriority"/> class.
        /// </summary>
        ////[SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1126:PrefixCallsCorrectly", Justification = "This code block is generated by SDK tool.")]
        ////[SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1100:DoNotPrefixCallsWithBaseUnlessLocalImplementationExists", Justification = "This code block is generated by SDK tool.")]
        public PreServiceRequestUpdateSetPriority()
            : base(typeof(PreServiceRequestUpdateSetPriority))
        {
            RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Update", "incident", new Action<LocalPluginContext>(this.ExecutePreServiceRequestUpdateUpdateUserTimeZones)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreServiceRequestUpdateUpdateUserTimeZones(LocalPluginContext localContext)
        {
            bool duedatechange = false;
            bool isSurveyServiceRequest = false;

            if (localContext == null)
            {
                return;
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            var preImageIncident = (context.PreEntityImages != null && context.PreEntityImages.Contains(this.preImageAlias)) ? context.PreEntityImages[this.preImageAlias] : null;
            if (context.InputParameters.Contains("Target") && context.InputParameters["Target"] is Entity)
            {
                Entity entity = (Entity)context.InputParameters["Target"];
                isSurveyServiceRequest = preImageIncident.Attributes.Contains("smp_issurveyservicerequest") ? (bool)preImageIncident["smp_issurveyservicerequest"] : false;
                ITracingService trace = localContext.TracingService;
                if (entity.LogicalName == "incident")
                {
                    if (context.Depth <= 1 || (context.Depth == 5 && isSurveyServiceRequest == true))
                    {
                        var service = localContext.OrganizationService;
                        try
                        {
                            OptionSetValue entityStatusCode = entity.Attributes.Contains("statuscode") ? (OptionSetValue)entity["statuscode"] : (OptionSetValue)preImageIncident.Attributes["statuscode"];
                            trace.Trace(entityStatusCode.Value.ToString());
                            if (Convert.ToInt32(entityStatusCode.Value, CultureInfo.InvariantCulture) == (int)ServiceRequestEnum.StatusCode.Draft || (entity.Attributes.Contains("smp_problembuilding") || entity.Attributes.Contains("smp_problemclassid")
                                || entity.Attributes.Contains("smp_problemtypeid") || entity.Attributes.Contains("smp_problemroomtype")))
                            {
                                duedatechange = false;
                            }
                            else if (Convert.ToInt32(entityStatusCode.Value, CultureInfo.InvariantCulture) == (int)ServiceRequestEnum.StatusCode.PendingCSRDispatch || (entity.Attributes.Contains("smp_problembuilding") || entity.Attributes.Contains("smp_problemclassid")
                               || entity.Attributes.Contains("smp_problemtypeid") || entity.Attributes.Contains("smp_problemroomtype")))
                            {
                                duedatechange = false;
                            }
                            else if (preImageIncident.Attributes.Contains("smp_duedate"))
                            {
                                duedatechange = true;
                            }

                            GetIncidentDetails(service, preImageIncident, entity, duedatechange, trace, context);
                        }
                        catch (CustomServiceManagementPortalException ex)
                        {
                            trace.Trace("Exception :" + ex.Message);
                            Logger.Write(ex, ExceptionType.SetPriorityFailed, service, "incident", "smp_servicerequestid", context.PrimaryEntityId, ex.Message);
                        }
                    }
                    else
                    {
                        return;
                    }
                }
            }
        }

        /// <summary>
        /// Gets the building id.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <param name="incidentId">The incident id.</param>
        /// <param name="context">The context.</param>
        /// <param name="priorityId">The priority id.</param>
        /// <param name="duedatechange">The due date.</param>
        private static void GetIncidentDetails(IOrganizationService service, Entity incident, Entity context, bool duedatechange, ITracingService trace, IPluginExecutionContext localContext)
        {
            DateTime problemoccureddate = Convert.ToDateTime(null, CultureInfo.CurrentCulture);
            DateTime createdOn = Convert.ToDateTime(null, CultureInfo.CurrentCulture);
            int caseorigin = -999;
            bool portalSubmit = false;
            try
            {
                if (service != null)
                {
                    Guid incidentId = incident.Id;
                    if (incident != null)
                    {
                        int zone = 0;
                        Guid buildingId = context.Attributes.Contains("smp_problembuilding") ? ((EntityReference)context["smp_problembuilding"]).Id : ((EntityReference)incident["smp_problembuilding"]).Id;
                        Guid problemClassId = context.Attributes.Contains("smp_problemclassid") ? ((EntityReference)context["smp_problemclassid"]).Id : ((EntityReference)incident["smp_problemclassid"]).Id;
                        Guid problemTypeId = context.Attributes.Contains("smp_problemtypeid") ? ((EntityReference)context["smp_problemtypeid"]).Id : ((EntityReference)incident["smp_problemtypeid"]).Id;
                        Guid problemRoomType = context.Attributes.Contains("smp_problemroomtype") ? ((EntityReference)context["smp_problemroomtype"]).Id : ((EntityReference)incident["smp_problemroomtype"]).Id;

                        if (incident.Attributes.Contains("smp_problemoccureddatetime"))
                        {
                            problemoccureddate = Convert.ToDateTime(incident.Attributes["smp_problemoccureddatetime"], CultureInfo.CurrentCulture);
                        }

                        if (incident.Attributes.Contains("createdon"))
                        {
                            createdOn = Convert.ToDateTime(incident.Attributes["createdon"], CultureInfo.CurrentCulture);
                        }
                        if (incident.Attributes.Contains("caseorigincode"))
                        {
                            caseorigin = ((OptionSetValue)incident["caseorigincode"]).Value;
                        }

                        /*code changed on 09-01-2018 to run plugin only on portal submit true and not case origin 3*/
                        if (context.Attributes.Contains("smp_portalsubmit"))
                        {
                            portalSubmit = (bool)context["smp_portalsubmit"];
                        }

                        trace.Trace("caseorigin :" + caseorigin.ToString());
                        OptionSetValue entityStatusCode = (OptionSetValue)incident.Attributes["statuscode"];
                        int statusCode = Convert.ToInt32(entityStatusCode.Value, CultureInfo.InvariantCulture);
                        if (statusCode == (int)ServiceRequestEnum.StatusCode.Closed || statusCode == (int)ServiceRequestEnum.StatusCode.Cancelled)
                        {
                            return;
                        }
                        else
                        {
                            if (problemRoomType != Guid.Empty)
                            {
                                zone = GetZoneByProblemRoomType(service, problemRoomType, trace);
                            }

                            /*code change on 10-01-2018 for priority to set / user timezone based on portal submit instead of case origin*/
                            if (buildingId != Guid.Empty && problemoccureddate != null && problemClassId != Guid.Empty && problemTypeId != Guid.Empty && problemRoomType != Guid.Empty)
                            {
                                UpdateUserTimeZonesToServiceRequest(service, incidentId, buildingId, createdOn, problemoccureddate, incident, context, problemClassId, problemTypeId, zone, duedatechange, trace, caseorigin, portalSubmit, localContext, statusCode);
                            }
                            else
                            {
                                trace.Trace("in Log");
                                LogNotAllAttributesPopulated(service, incident);
                            }
                        }
                    }
                }
            }
            catch (CustomServiceManagementPortalException)
            {
            }
        }

        /// <summary>
        /// Updates the user time zones to service request.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <param name="objIncident">The object incident.</param>
        /// <param name="buildingId">The building id.</param>
        /// <param name="createdTime">The created time.</param>
        /// <param name="problemDate">The problem date.</param>
        /// <param name="context">The context.</param>
        /// <param name="problemClass">The problem class.</param>
        /// <param name="problemType">Type of the problem.</param>
        /// <param name="zone">The zone.</param>        
        /// <param name="priorityId">The priority id.</param>
        /// <param name="duedatechange">The due date.</param>
        private static void UpdateUserTimeZonesToServiceRequest(IOrganizationService service, Guid objIncident, Guid buildingId, DateTime createdTime, DateTime problemDate, Entity incident, Entity context, Guid problemClass, Guid problemType, int zone, bool duedatechange, ITracingService trace, int caseorigin, bool portalSubmit, IPluginExecutionContext localContext, int statusCode)
        {
            Guid timeZoneId = Guid.Empty;
            string timeZoneName = string.Empty;
            string createdDateOnBuilidingTimeZone = string.Empty;
            string problemOccuredDateOnBuilidingTimeZone = string.Empty;
            string finalcialStateCampus = string.Empty;
            DateTime submittedDateTime = DateTime.Now;
            string submittedDateOnBuilidingTimeZone = string.Empty;
            DateTime recordsubmitted = Convert.ToDateTime(DateTime.UtcNow, CultureInfo.CurrentCulture);
            double dueDateOffset = 0;
            try
            {
                context["smp_submitteddatetime"] = recordsubmitted;
                if (buildingId != Guid.Empty)
                {
                    ////As part of UserStory:3882364 changes, common functions are moved to Helper class
                    string[] timeZoneDetails = TimeZoneHelper.GetTimeZoneIdFromBuilding(service, buildingId, objIncident).ToString().Split('@');
                    timeZoneId = new Guid(timeZoneDetails[0]);
                    finalcialStateCampus = timeZoneDetails[1].ToString();
                    if (timeZoneId != Guid.Empty)
                    {
                        timeZoneName = TimeZoneHelper.GetTimeZoneNameFromTimeZone(service, buildingId);
                        if (!string.IsNullOrEmpty(timeZoneName))
                        {
                            string[] time = new string[0];
                            string offset = timeZoneName;
                            string symbol = offset.Substring(0, 1);
                            if (symbol == "+")
                            {
                                time = offset.Split('+');
                            }
                            else if (symbol == "-")
                            {
                                time = offset.Split('-');
                            }

                            double min;
                            if (time[1].Contains(":"))
                            {
                                string[] timesplit = time[1].Split(':');
                                decimal hourMinutes = Convert.ToDecimal(timesplit[0], CultureInfo.InvariantCulture) * 60;
                                decimal minutes = hourMinutes + Convert.ToDecimal(timesplit[1], CultureInfo.InvariantCulture);
                                min = Convert.ToDouble(minutes);
                            }
                            else
                            {
                                decimal hourMinutes = Convert.ToDecimal(time[1], CultureInfo.InvariantCulture) * 60;
                                decimal minutes = hourMinutes;
                                min = Convert.ToDouble(minutes);
                            }

                            if (symbol == "+")
                            {
                                string addNegative = "-" + Convert.ToString(min, CultureInfo.InvariantCulture);
                                dueDateOffset = Convert.ToDouble(addNegative, CultureInfo.InvariantCulture);
                                createdDateOnBuilidingTimeZone = createdTime.AddMinutes(min).ToString();
                                if (problemDate == Convert.ToDateTime(null, CultureInfo.CurrentCulture))
                                {
                                    problemOccuredDateOnBuilidingTimeZone = createdTime.AddMinutes(min).ToString();
                                }
                                else
                                {
                                    problemOccuredDateOnBuilidingTimeZone = problemDate.AddMinutes(min).ToString();
                                }
                                submittedDateOnBuilidingTimeZone = submittedDateTime.AddMinutes(min).ToString();
                            }
                            else if (symbol == "-")
                            {
                                dueDateOffset = min;
                                string addNegative = "-" + Convert.ToString(min, CultureInfo.InvariantCulture);
                                double negativeMinutes = Convert.ToDouble(addNegative, CultureInfo.InvariantCulture);
                                createdDateOnBuilidingTimeZone = createdTime.AddMinutes(negativeMinutes).ToString();
                                if (problemDate == Convert.ToDateTime(null, CultureInfo.CurrentCulture))
                                {
                                    problemOccuredDateOnBuilidingTimeZone = createdTime.AddMinutes(negativeMinutes).ToString();
                                }
                                else
                                {
                                    problemOccuredDateOnBuilidingTimeZone = problemDate.AddMinutes(negativeMinutes).ToString();
                                }
                                submittedDateOnBuilidingTimeZone = submittedDateTime.AddMinutes(negativeMinutes).ToString();
                            }

                            var priority = GetPriorityId(service, problemClass, problemType, zone, finalcialStateCampus);
                            int priorityHours = 0;
                            priorityHours = TimeZoneHelper.GetPriorityHours(service, trace, priority.Id);
                            UpdateServiceActivity(
                            service,
                            objIncident,
                            problemOccuredDateOnBuilidingTimeZone,
                            createdDateOnBuilidingTimeZone,
                            priority,
                            priorityHours,
                            submittedDateOnBuilidingTimeZone,
                            duedatechange,
                            buildingId,
                            incident,
                            context,
                            trace,
                            caseorigin,
                            portalSubmit,
                            localContext,
                            dueDateOffset,
                            statusCode);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                PopulateExceptionLog(ex, service, objIncident);
                CustomServiceManagementPortalException customEx = new CustomServiceManagementPortalException("Exception while updating service activity", ex);
                throw customEx;
            }
        }

        /// <summary>
        /// Updates the service activity.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <param name="objIncident">The object incident.</param>        
        /// <param name="problemDate">The problem date.</param>
        /// <param name="createdDate">The created date.</param>
        /// <param name="priorityId">The priority id.</param>
        /// <param name="priorityHours">The priority hours.</param>
        /// <param name="userSubmittedDateTime">The user submitted date time.</param>
        /// <param name="duedatechange">The due date change.</param>
        /// <param name="buildingId">The building id.</param>
        private static void UpdateServiceActivity(IOrganizationService service, Guid objIncident, string problemDate, string createdDate, Entity priorityId, int priorityHours, string userSubmittedDateTime, bool duedatechange, Guid buildingId, Entity preImage, Entity incident, ITracingService trace, int caseorigin, bool portalSubmit, IPluginExecutionContext context, double dueDateOffset, int preStatusCode)
        {
            try
            {
                EntityReference contact = preImage.Attributes.Contains(CRMAttributesResource.ServiceRequestContact) ? (EntityReference)preImage[CRMAttributesResource.ServiceRequestContact] : null;
                incident["smp_submitteddatetimebybuildingtimezone"] = string.Format(CultureInfo.InvariantCulture, "{0:MM/d/yyyy h:mm tt}", Convert.ToDateTime(userSubmittedDateTime, CultureInfo.CurrentCulture.DateTimeFormat));
                incident["smp_createddatetimebybuildingtimezone"] = string.Format(CultureInfo.InvariantCulture, "{0:MM/d/yyyy h:mm tt}", Convert.ToDateTime(createdDate, CultureInfo.CurrentCulture.DateTimeFormat));
                incident["smp_occureddatetimebybuildingtimezone"] = string.Format(CultureInfo.InvariantCulture, "{0:MM/d/yyyy h:mm tt}", Convert.ToDateTime(problemDate, CultureInfo.CurrentCulture.DateTimeFormat));
                int priorityMinutes = Convert.ToInt32(priorityHours, CultureInfo.CurrentCulture); ////* 60;
                int statusCode = preStatusCode;
                if (incident.Attributes.Contains("statuscode"))
                {
                    OptionSetValue entityStatusCode = (OptionSetValue)incident.Attributes["statuscode"];
                    statusCode = Convert.ToInt32(entityStatusCode.Value, CultureInfo.InvariantCulture);
                }
                int? runningUserTimeZoneCode = TimeZoneHelper.RetrieveUsersSettings(service, context.UserId, caseorigin, portalSubmit, preStatusCode, statusCode, trace);
                if (priorityId.Id != Guid.Empty)
                {
                    trace.Trace("In UpdateServiceActivity");
                    DateTime due;
                    if (caseorigin == (int)ServiceRequestEnum.ServiceRequestOrigin.Web)
                    {
                        if (preImage.Attributes.Contains("smp_flag") && (bool)preImage["smp_flag"] == false)
                        {
                            incident["smp_priorityid"] = new EntityReference("smp_priority", priorityId.Id);
                            incident["smp_flag"] = true;
                        }
                        else
                        {
                            incident["smp_priorityid"] = new EntityReference("smp_priority", priorityId.Id);
                        }
                    }
                    else
                    {
                        if (caseorigin != (int)ServiceRequestEnum.ServiceRequestOrigin.Web)
                        {
                            incident["smp_priorityid"] = new EntityReference("smp_priority", priorityId.Id);
                        }
                    }

                    Guid prevPriorityId = preImage.Attributes.Contains("smp_priorityid") ? ((EntityReference)preImage["smp_priorityid"]).Id : ((EntityReference)incident["smp_priorityid"]).Id;

                    if (duedatechange == true)
                    {
                        due = Convert.ToDateTime(userSubmittedDateTime, CultureInfo.CurrentCulture);
                    }
                    else
                    {
                        due = Convert.ToDateTime(userSubmittedDateTime, CultureInfo.CurrentCulture).AddMinutes(Convert.ToDouble(Convert.ToString(priorityMinutes, CultureInfo.InvariantCulture), CultureInfo.CurrentCulture));
                    }

                    if (priorityHours != 0 || duedatechange == true)
                    {
                        due = TimeZoneHelper.GetDueDateByBuildingTimeZoneConsideringHolidays(service, buildingId, due, priorityMinutes);
                        if (due != Convert.ToDateTime(null, CultureInfo.CurrentCulture))
                        {
                            if (incident.Attributes.Contains("smp_duedatebybuildingtimezone"))
                            {
                                incident["smp_duedatebybuildingtimezone"] = string.Format(CultureInfo.InvariantCulture, "{0:MM/d/yyyy h:mm tt}", Convert.ToDateTime(due, CultureInfo.CurrentCulture.DateTimeFormat));
                            }
                            else
                            {
                                incident.Attributes.Add("smp_duedatebybuildingtimezone", string.Format(CultureInfo.InvariantCulture, "{0:MM/d/yyyy h:mm tt}", Convert.ToDateTime(due, CultureInfo.CurrentCulture.DateTimeFormat)));
                            }

                            due = due.AddMinutes(dueDateOffset);
                            DateTime dueUserTimeZone = TimeZoneHelper.RetrieveLocalTimeFromUTCTime(due, runningUserTimeZoneCode, service);
                            if (incident.Attributes.Contains("smp_duedate"))
                            {
                                incident["smp_duedate"] = Convert.ToDateTime(dueUserTimeZone, CultureInfo.CurrentCulture);
                            }
                            else
                            {
                                incident.Attributes.Add("smp_duedate", Convert.ToDateTime(dueUserTimeZone, CultureInfo.CurrentCulture));
                            }

                            if (incident.Attributes.Contains("smp_duedatetimebybuildingtimezone"))
                            {
                                incident["smp_duedatetimebybuildingtimezone"] = Convert.ToDateTime(dueUserTimeZone, CultureInfo.CurrentCulture);
                            }
                            else
                            {
                                incident.Attributes.Add("smp_duedatetimebybuildingtimezone", Convert.ToDateTime(dueUserTimeZone, CultureInfo.CurrentCulture));
                            }
                        }
                    }
                    else if (priorityHours == 0)
                    {
                        if (incident.Attributes.Contains("smp_duedatebybuildingtimezone"))
                        {
                            incident["smp_duedatebybuildingtimezone"] = null;
                        }
                        else
                        {
                            incident.Attributes.Add("smp_duedatebybuildingtimezone", null);
                        }

                        if (incident.Attributes.Contains("smp_duedatetimebybuildingtimezone"))
                        {
                            incident["smp_duedatetimebybuildingtimezone"] = null;
                        }
                        else
                        {
                            incident.Attributes.Add("smp_duedatetimebybuildingtimezone", null);
                        }

                        if (incident.Attributes.Contains("smp_duedate"))
                        {
                            incident["smp_duedate"] = null;
                        }
                        else
                        {
                            incident.Attributes.Add("smp_duedate", null);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                PopulateExceptionLog(ex, service, objIncident);
                CustomServiceManagementPortalException customEx = new CustomServiceManagementPortalException("Error while updating priority.", ex);
                throw customEx;
            }
        }

        /// <summary>
        /// Gets the type of the zone by problem room.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <param name="problemRoomType">Type of the problem room.</param>
        /// <param name="context">The context.</param>
        /// <param name="incidentId">The incident.</param>
        /// <returns>Problem Room Type</returns>
        private static int GetZoneByProblemRoomType(IOrganizationService service, Guid problemRoomType, ITracingService trace)
        {
            int zone = 0;
            try
            {
                if (service != null)
                {
                    Entity roomType = service.Retrieve("smp_roomtype", problemRoomType, new ColumnSet("smp_zone"));
                    if (roomType != null)
                    {
                        if (roomType.Attributes.Contains("smp_zone"))
                        {
                            zone = Convert.ToInt32(((Microsoft.Xrm.Sdk.OptionSetValue)roomType.Attributes["smp_zone"]).Value);
                        }
                    }
                }

                return zone;
            }
            catch (Exception ex)
            {
                CustomServiceManagementPortalException customEx = new CustomServiceManagementPortalException("Error while getting zone from Room Type.", ex);
                throw customEx;
            }
        }

        /// <summary>
        /// Gets the priority id.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <param name="context">The context.</param>
        /// <param name="problemClass">The problem class.</param>
        /// <param name="problemType">Type of the problem.</param>
        /// <param name="zone">The zone.</param>
        /// <param name="finalcialStateCampus">The financial state campus.</param>
        /// <param name="incidentId">The incident.</param>
        /// <returns>priority id.</returns>
        private static Entity GetPriorityId(IOrganizationService service, Guid problemClass, Guid problemType, int zone, string finalcialStateCampus)
        {
            Entity priorityId = new Entity("smp_priority");
            try
            {
                QueryExpression slaquery = new QueryExpression()
                {
                    EntityName = "smp_slamatrix",
                    ColumnSet = new ColumnSet("smp_priorityid", "smp_starthours", "smp_endhours"),
                    Criteria =
                            {
                                Conditions =
                                {
                                    new ConditionExpression("smp_isfinancialstatecampus", ConditionOperator.Equal, Convert.ToBoolean(finalcialStateCampus, CultureInfo.InvariantCulture)),
                                    new ConditionExpression("smp_problemclassid", ConditionOperator.Equal, problemClass),
                                    new ConditionExpression("smp_problemtypeid", ConditionOperator.Equal, problemType),
                                    new ConditionExpression("smp_zone", ConditionOperator.Equal, zone),
                                    new ConditionExpression("statuscode", ConditionOperator.Equal, 1),
                                }
                            }
                };
                if (service != null)
                {
                    foreach (Entity sLA in service.RetrieveMultiple(slaquery).Entities)
                    {
                        priorityId.Id = ((Microsoft.Xrm.Sdk.EntityReference)sLA.Attributes["smp_priorityid"]).Id;
                        priorityId["smp_name"] = ((EntityReference)sLA["smp_priorityid"]).Name;
                        break;
                    }
                }

                return priorityId;
            }
            catch (Exception ex)
            {
                CustomServiceManagementPortalException customEx = new CustomServiceManagementPortalException("Error while getting priority.", ex);
                throw customEx;
            }
        }

        /// <summary>
        /// Populates the exception log.
        /// </summary>
        /// <param name="ex">The ex.</param>
        /// <param name="service">The service.</param>
        /// <param name="incidentId">The incident id.</param>
        private static void PopulateExceptionLog(Exception ex, IOrganizationService service, Guid incidentId)
        {
            try
            {
                Logger.Write(ex, ExceptionType.SetPriorityFailed, service, "incident", "smp_servicerequestid", incidentId, string.Empty);
            }
            catch (Exception)
            {
                throw;
            }
        }

        /// <summary>
        /// Logs the not all attributes populated.
        /// </summary>
        /// <param name="service">The service.</param>
        /// <param name="objectIncident">The object incident.</param>
        private static void LogNotAllAttributesPopulated(IOrganizationService service, Entity objectIncident)
        {
            var message = "Priority was not set 112.";
            if (!objectIncident.Attributes.Contains(CRMAttributesResource.ProblemBuildingIdAttribute))
            {
                message = "Building, ";
            }

            if (!objectIncident.Attributes.Contains(CRMAttributesResource.ProblemRoomTypeIdAttribute))
            {
                message = message + "Problem Room, ";
            }

            if (!objectIncident.Attributes.Contains(CRMAttributesResource.ProblemClassIdAttribute))
            {
                message = message + "Problem Class, ";
            }

            if (!objectIncident.Attributes.Contains(CRMAttributesResource.ProblemTypeIdAttribute))
            {
                message = message + "Problem Type";
            }

            message = message.TrimEnd(',');
            message = message + " is missing.";
            Logger.Write(message, ExceptionType.SetPriorityFailed, service, "incident", "smp_servicerequestid", objectIncident.Id, string.Empty);
        }
    }
}